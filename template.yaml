AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  orderprocessing

  Sample SAM Template for orderprocessing

Globals:
  Function:
    Timeout: 20
    MemorySize: 512

Resources:
  # Step Function State Machine
  OrderProcessingStateMachine:
    Type: AWS::StepFunctions::StateMachine
    Properties: 
      DefinitionString:
        Fn::Sub: |
          {
            "StartAt": "ValidateOrder",
            "States": {
              "ValidateOrder": {
                "Type": "Task",
                "Resource": "${ValidateOrderLambda.Arn}",
                "Next": "ProcessPayment",
                "Retry": [{"ErrorEquals": ["States.ALL"], "MaxAttempts": 3, "IntervalSeconds": 2}],
                "Catch": [{"ErrorEquals": ["States.ALL"], "Next": "OrderFailed"}],
                "TimeoutSeconds": 10
              },
              "ProcessPayment": {
                "Type": "Task",
                "Resource": "${ProcessPaymentLambda.Arn}",
                "Next": "UpdateInventory",
                "Retry": [{"ErrorEquals": ["States.ALL"], "MaxAttempts": 3, "IntervalSeconds": 2}],
                "Catch": [{"ErrorEquals": ["States.ALL"], "Next": "OrderFailed"}],
                "TimeoutSeconds": 10
              },
              "UpdateInventory": {
                "Type": "Task",
                "Resource": "${UpdateInventoryLambda.Arn}",
                "Next": "NotifyCustomer",
                "Retry": [{"ErrorEquals": ["States.ALL"], "MaxAttempts": 3, "IntervalSeconds": 2}],
                "Catch": [{"ErrorEquals": ["States.ALL"], "Next": "OrderFailed"}],
                "TimeoutSeconds": 10
              },
              "NotifyCustomer": {
                "Type": "Task",
                "Resource": "${NotifyCustomerLambda.Arn}",
                "Next": "GenerateInvoice",
                "Retry": [{"ErrorEquals": ["States.ALL"], "MaxAttempts": 3, "IntervalSeconds": 2}],
                "Catch": [{"ErrorEquals": ["States.ALL"], "Next": "OrderFailed"}],
                "TimeoutSeconds": 10
              },
              "GenerateInvoice": {
                "Type": "Task",
                "Resource": "${GenerateInvoiceLambda.Arn}",
                "End": true,
                "TimeoutSeconds": 10
              },
              "OrderFailed": {
                "Type": "Fail",
                "Error": "OrderProcessingFailed",
                "Cause": "Workflow failed"
              }

            }
          }
      RoleArn: !GetAtt StepFunctionsExecutionRole.Arn

   # IAM Role for Step Functions
  StepFunctionsExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: states.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: StepFunctionsPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - "lambda:InvokeFunction"
                Resource: "*"

   # Lambda Function for Step Function Integration (Start Step Function Execution)
  StartStepFunctionLambda:
    Type: AWS::Lambda::Function
    Properties:
      Timeout: 30
      Code: orderprocessing  # The directory or S3 location where your Lambda code is stored
      Handler: com.order.lambda.stepfunction.handler.StartStepFunctionHandler::handleRequest
      Role: !GetAtt LambdaExecutionRole.Arn
      Runtime: java17
      Architectures:
        - x86_64
      MemorySize: 512

  StartStepFunctionLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref StartStepFunctionLambda
      Principal: apigateway.amazonaws.com

  ValidateOrderLambda:
    Type: AWS::Lambda::Function
    Properties:
      Timeout: 10
      Code: orderprocessing
      Handler: com.order.lambda.stepfunction.handler.ValidateOrderHandler::handleRequest
      Role: !GetAtt LambdaExecutionRole.Arn
      Runtime: java17
      Architectures:
        - x86_64
      MemorySize: 512
      Environment: # More info about Env Vars: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#environment-object
        Variables:
          PARAM1: VALUE

  ProcessPaymentLambda:
    Type: AWS::Lambda::Function
    Properties:
      Timeout: 10
      Code: orderprocessing
      Handler: com.order.lambda.stepfunction.handler.ProcessPaymentHandler::handleRequest
      Role: !GetAtt LambdaExecutionRole.Arn
      Runtime: java17
      Architectures:
        - x86_64
      MemorySize: 512

  UpdateInventoryLambda:
    Type: AWS::Lambda::Function
    Properties:
      Timeout: 10
      Code: orderprocessing
      Handler: com.order.lambda.stepfunction.handler.UpdateInventoryHandler::handleRequest
      Role: !GetAtt LambdaExecutionRole.Arn
      Runtime: java17
      Architectures:
        - x86_64
      MemorySize: 512

  NotifyCustomerLambda:
    Type: AWS::Lambda::Function
    Properties:
      Timeout: 10
      Code: orderprocessing
      Handler: com.order.lambda.stepfunction.handler.NotifyCustomerHandler::handleRequest
      Role: !GetAtt LambdaExecutionRole.Arn
      Runtime: java17
      Architectures:
        - x86_64
      MemorySize: 512

  GenerateInvoiceLambda:
    Type: AWS::Lambda::Function
    Properties:
      Timeout: 10
      Code: orderprocessing
      Handler: com.order.lambda.stepfunction.handler.GenerateInvoiceHandler::handleRequest
      Role: !GetAtt LambdaExecutionRole.Arn
      Runtime: java17
      Architectures:
        - x86_64
      MemorySize: 512

  # IAM Role for Lambda Functions
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: LambdaPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: "*"
              - Effect: Allow
                Action:
                 - states:StartExecution  # This grants permission to start Step Functions
                Resource: arn:aws:states:ap-south-1:588738584877:stateMachine:OrderProcessingStateMachine-b8JufPg1iiaE

  # API Gateway to trigger Lambda
  OrderProcessingApi:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: "OrderProcessingApi"
      Description: "API Gateway for triggering Order Processing Step Function"
      
  OrderProcessingApiResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref OrderProcessingApi
      ParentId: !GetAtt OrderProcessingApi.RootResourceId
      PathPart: "process-order"

  OrderProcessingApiMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      HttpMethod: POST
      ResourceId: !Ref OrderProcessingApiResource
      RestApiId: !Ref OrderProcessingApi
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${StartStepFunctionLambda.Arn}/invocations"
        PassthroughBehavior: WHEN_NO_MATCH

  OrderProcessingApiDeployment:
    Type: AWS::ApiGateway::Deployment
    Properties:
      RestApiId: !Ref OrderProcessingApi
      StageName: prod
    DependsOn: 
      - StartStepFunctionLambda  # Ensure your method or integration resource is included here

  ApiGatewayInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref StartStepFunctionLambda
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${OrderProcessingApi}/*/POST/process-order

Outputs:
  StepFunctionArn:
    Description: "ARN of the OrderProcessing State Machine"
    Value: !Ref OrderProcessingStateMachine

  ApiUrl:
    Description: "URL of the OrderProcessing API Gateway"
    Value: !Sub "https://${OrderProcessingApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/process-order"

  # HelloWorldFunction:
  #   Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
  #   Properties:
  #     CodeUri: orderprocessing
  #     Handler: com.order.lambda.stepfunction.handler.App::handleRequest
  #     Runtime: java17
  #     Architectures:
  #       - x86_64
  #     MemorySize: 512
  #     Environment: # More info about Env Vars: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#environment-object
  #       Variables:
  #         PARAM1: VALUE
     
